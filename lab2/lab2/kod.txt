import numpy as np
from binet import binet


class Number(float):
    add_count = 0
    sub_count = 0
    mul_count = 0
    div_count = 0

    def __new__(cls, value):
        return super().__new__(cls, value)

    def __add__(self, other):
        Number.add_count += 1
        return Number(super().__add__(other))

    def __sub__(self, other):
        Number.sub_count += 1
        return Number(super().__sub__(other))

    def __mul__(self, other):
        Number.mul_count += 1
        return Number(super().__mul__(other))

    def __truediv__(self, other):
        Number.div_count += 1
        return Number(super().__truediv__(other))
    
    def __radd__(self, other):
        Number.add_count += 1
        return Number(super().__radd__(other))
    
    def __rsub__(self, other):
        Number.sub_count += 1
        return Number(super().__rsub__(other))
    
    def __rmul__ (self, other):
        Number.mul_count += 1
        return Number(super().__rmul__(other))

    def __rtruediv__(self, other):
        Number.div_count += 1
        return Number(super().__rtruediv__(other))

    @classmethod
    def purge(cls):
        cls.add_count = 0
        cls.sub_count = 0
        cls.mul_count = 0
        cls.div_count = 0


class Pipe:
    def __init__(self, value):
        self.value = value

    def chain(self, func, assoc_rvalue=True):
        if assoc_rvalue:
            self.value = func(self.value)
        else:
            func(self.value)
        return self

    def unwrap(self):
        return self.value


def random_matrix(k: int, low=1E-8, high=1, function=np.random.uniform) -> np.ndarray:
    return np.array([[Number(j) for j in i] for i in function(low, high, size=(k, k))], dtype=Number)


type partitioned_matrix = tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]


def matrix_partitions(matrix: np.ndarray) -> partitioned_matrix:
    rows, cols = matrix.shape
    rows //= 2
    cols //= 2

    NW = matrix[:rows, :cols]
    NE = matrix[:rows, cols:]
    SW = matrix[rows:, :cols]
    SE = matrix[rows:, cols:]

    return NW, NE, SW, SE


def number_eye(n: int) -> np.ndarray:
    return np.array([[Number(1 if i == j else 0) for j in range(n)] for i in range(n)], dtype=Number)


import numpy as np
from sys import setrecursionlimit
setrecursionlimit(100000)


type block_matrix = tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]


def binet_partition(matrix: np.ndarray) -> block_matrix:
    n = matrix.shape[0] // 2
    m = matrix.shape[1] // 2
    
    NW = matrix[:n, :m]
    NE = matrix[:n, m:]
    SW = matrix[n:, :m]
    SE = matrix[n:, m:]

    return NW, NE, SW, SE


def binet(A: np.ndarray, B: np.ndarray) -> np.ndarray:
    if A.shape[0] <= 2 or B.shape[0] <= 2:

        return A @ B

    A_11, A_12, A_21, A_22 = binet_partition(A)

    B_11, B_12, B_21, B_22 = binet_partition(B)

    NW = binet(A_11, B_11) + binet(A_12, B_21)
    NE = binet(A_11, B_12) + binet(A_12, B_22)
    SW = binet(A_21, B_11) + binet(A_22, B_21)
    SE = binet(A_21, B_12) + binet(A_22, B_22)

    N = np.concatenate((NW, NE), axis=1)
    S = np.concatenate((SW, SE), axis=1)
    return np.concatenate((N, S))


def generate_tests() -> str:
    result = ""
    for i in [1, 2, 3, 5, 10, 16, 32, 99, 256]:
        result += f"def test_{i}x{i}(self):\ntest(self, {i})\n\n"
    return result

from lu import lu_factorization
from binet import binet
import numpy as np


def recursive_det(A, mult):
    L, U = lu_factorization(A, mult)
    return U.diagonal().prod() * L.diagonal().prod()

import numpy as np
from lu import lu_factorization
from util import Number, random_matrix, matrix_partitions
from matinv import invert_matrix
from binet import binet
from strassen import Strassen

def gauss_elimination(A: np.ndarray,b: np.ndarray, mult) -> np.ndarray:

    A11, A12,A21, A22 = matrix_partitions(A)
    n = A.shape[0]//2

    b1 = b[:n]
    b2 = b[n:]
    
    L11, U11 = lu_factorization(A11, mult=mult)

    L11_inv = invert_matrix(L11, mult)
    U11_inv = invert_matrix(U11, mult=mult)
    S = A22 - mult(mult(mult(A21, U11_inv), L11_inv), A12)

    L_S, U_S = lu_factorization(S, mult=mult)

    C11 = U11
    C12 = mult(L11_inv, A12)

    C22 = U_S

    RHS1 = mult(L11_inv, b1)
    RHS2 = mult(invert_matrix(L_S, mult=mult), b2 - mult(mult(mult(A21, U11_inv), L11_inv), b1))

    x2 = mult(invert_matrix(U_S, mult=mult), RHS2)

    x1 = mult(invert_matrix(U11, mult=mult), RHS1 - mult(C12, x2))

    x = np.concatenate((x1, x2))


    return x
              

if __name__ == '__main__':
    np.random.seed(42)  # For reproducibility

    # Generate a random A matrix and b vector
    n = 2  # Size of the matrix
    A = np.random.rand(n, n)
    b = np.random.rand(n)

    # Solve using recursive Gaussian elimination
    x_recursive = gauss_elimination(A, b, binet)

    # Solve using numpy's built-in function
    x_numpy = np.linalg.solve(A, b)

    if np.allclose(x_recursive, x_numpy):
        print("\nThe solutions match! The implementation is correct.")
    else:
        print("\nThe solutions do not match. There may be an error in the implementation.")


import numpy as np
from sys import setrecursionlimit
from util import Number, random_matrix, matrix_partitions
from binet import binet
from matinv import invert_matrix


def lu_factorization(matrix: np.ndarray, mult) -> tuple[np.ndarray, np.ndarray]:
    if matrix.size == 1:
        return np.array([[Number(1)]], dtype=Number), matrix

    A_11, A_12, A_21, A_22 = matrix_partitions(matrix)
    L_11, U_11 = lu_factorization(A_11, mult)
    U_11_inv = invert_matrix(U_11, mult)

    L_21 = mult(A_21, U_11_inv)
    L_11_inv = invert_matrix(L_11, mult)

    U_12 = mult(L_11_inv, A_12)
    L_22 = A_22 - mult(mult(mult(A_21, U_11_inv), L_11_inv), A_12)
    S = L_22

    L_S, U_S = lu_factorization(S, mult)
    L_22 = L_S
    U_22 = U_S

    L = np.concatenate(
        (np.concatenate((L_11, np.zeros((L_11.shape[0], L_22.shape[1]))), axis=1),
         np.concatenate((L_21, L_22), axis=1)),
        axis=0
    )

    U = np.concatenate(
        (np.concatenate((U_11, U_12), axis=1),
         np.concatenate((np.zeros((U_22.shape[0], U_11.shape[1])), U_22), axis=1)),
        axis=0
    )

    return L, U


if __name__ == '__main__':
    n = 5
    A = random_matrix(n, 1, 20)
    L, U = lu_factorization(A, binet)

    print(L, U, A, L @ U, sep='\n\n\n')


import numpy as np
from sys import setrecursionlimit

setrecursionlimit(1000000)

from util import Number, random_matrix, matrix_partitions, number_eye, Pipe
from binet import binet

recursion_counter = 0


def invert_matrix(matrix: np.ndarray, mult) -> np.ndarray:
    if matrix.size == 1:
        return 1 / matrix

    A_11, A_12, A_21, A_22 = matrix_partitions(matrix)
    A_11_inv = invert_matrix(A_11, mult)

    S_22 = A_22 - mult(mult(A_21, A_11_inv), A_12)
    S_22_inv = invert_matrix(S_22, mult)

    long_matmul = mult(mult(mult(A_12, S_22_inv), A_21), A_11_inv)

    B_11 = mult(A_11_inv, long_matmul + number_eye(long_matmul.shape[0]))
    B_12 = -mult(mult(A_11_inv, A_12), S_22_inv)

    B_21 = -mult(mult(S_22_inv, A_21), A_11_inv)

    B_22 = S_22_inv
    N = np.concatenate((B_11, B_12), axis=1)
    S = np.concatenate((B_21, B_22), axis=1)

    return np.concatenate((N, S), axis=0)


if __name__ == '__main__':
    n = 10
    a1 = random_matrix(n, 1, 10, np.random.randint)
    a2 = random_matrix(n, 1, 10, np.random.randint)

    inv = invert_matrix(a1, np.ndarray.__matmul__)
    eye = number_eye(n)
    print(a1, binet(a1, inv), sep='\n\n')


