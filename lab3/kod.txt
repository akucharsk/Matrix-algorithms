from sklearn.utils.extmath import randomized_svd
import numpy as np
from numpy.linalg import svd

class CompressTree:
    def __init__(self,matrix, row_min, row_max, col_min, col_max):
        self.matrix = matrix
        self.row_min = row_min
        self.row_max = row_max
        self.col_min = col_min
        self.col_max = col_max


        self.leaf = False
        '''
         UL | UR
        ----+----
         DL | DR
    
        '''
        self.childs = [[None, None], [None, None]]

    def make_leaf(self, U, Sigma, V):
        self.leaf = True
        self.u = U
        self.s = Sigma
        self.v = V

    def create_tree(self, r, epsylon):
        
        U, Sigma, V = randomized_svd(self.matrix[self.row_min:self.row_max, self.col_min: self.col_max], n_components=r)
        if self.row_max <= self.row_min + r:
            self.make_leaf(U, Sigma, V)
        elif Sigma[r - 1] <= epsylon:
            self.make_leaf(U, Sigma, V)
        else:
            rows = [self.row_min, (self.row_min + self.row_max)//2, self.row_max]
            cols = [self.col_min, (self.col_min + self.col_max)//2, self.col_max]
            for i in range(2):
                for j in range(2):
                    self.childs[i][j] = CompressTree(self.matrix, rows[i], rows[i+1], cols[j], cols[j+1])
                    self.childs[i][j].create_tree(r, epsylon)

    def decompress(self, dest_matrix):
        if self.leaf:
            r = len(self.s)
            sigma = np.zeros((r,r))
            np.fill_diagonal(sigma, self.s)
            dest_matrix[self.row_min:self.row_max, self.col_min: self.col_max] = self.u @ sigma @ self.v
        
        else:
            for i in range(2):
                for j in range(2):
                    self.childs[i][j].decompress(dest_matrix)

    def compare(self, new_matrix):
        return np.sum(np.square(self.matrix - new_matrix))

if __name__ == "__main__":
    X = np.random.random((64,64))
    P = np.random.random((64,64))
    P = (P > 0.8).astype(int)
    X = P * X
    X


    root = CompressTree(X, 0, len(X), 0, len(X[0]))
    U, Sigma, V = svd(X)
    Sigma
    root.create_tree(1, Sigma[len(Sigma)-1])


import numpy as np
import matplotlib.pyplot as plt
from collections import deque


def draw_tree(root, axis=plt, title=''):
    image = np.ones(root.matrix.shape)*255

    Q = deque()
    Q.append(root)
    while Q: 
        v = Q.pop()
        if v.leaf:
            r = len(v.s)
            gray = 125
            image[v.row_min:v.row_max, v.col_min:v.col_min+r] = gray*np.ones((v.row_max - v.row_min, r))#np.zeros((v.row_max - v.row_min, min(r,v.col_max - v.col_min )))
            image[v.row_min:v.row_min + r, v.col_min:v.col_max] =gray*np.ones((r , v.col_max - v.col_min)) #np.zeros((min(r,v.row_max - v.row_min) , v.col_max - v.col_min))
            image[v.row_min, v.col_min:v.col_max] = np.zeros((1,v.col_max - v.col_min))
            image[v.row_max-1, v.col_min:v.col_max] = np.zeros((1,v.col_max - v.col_min))
            image[v.row_min:v.row_max,v.col_min] = np.zeros(v.row_max-v.row_min)
            image[v.row_min:v.row_max,v.col_max-1] = np.zeros(v.row_max-v.row_min)
        else:
            for i in range(2):
                for j in range(2):
                    Q.append(v.childs[i][j])

    axis.imshow(image,cmap = "gray", vmin=0, vmax=255)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from CompressTree import CompressTree
from numpy.linalg import svd
from  timeit import default_timer as timer
from TreeDraw import draw_tree
import cv2

def gen_mat_with_zeros(how_many_zeros: float, size = 2 **10) -> np.ndarray:
    X = np.random.random((size,size))
    P = np.random.random((size,size))
    return (P > how_many_zeros).astype(int) * X

def measure_algorithms():
    results = []
    sigmas = []

    for p in [0.99,0.98, 0.95, 0.9, 0.8]:
        mat = gen_mat_with_zeros(p)
        U, Sigma, V = svd(mat)
        sigmas.append([p, Sigma])
        for b in [1, 4]:
            fig, axes = plt.subplots(1, 3, figsize=(15, 5))
            for i, s in enumerate([1,len(Sigma)//2 - 1, len(Sigma)-1]):
                root = CompressTree(mat, 0, len(mat), 0, len(mat[0]))
                start = timer()
                root.create_tree(b, Sigma[s])
                end = timer()
                axes[i].axis('off')
                axes[i].set_title(f"zer jest {p}, b wynosi {b}, indeks sigmy {s}")
                draw_tree(root, axis=axes[i])
                decompressed = np.zeros((2**10, 2**10))
                root.decompress(decompressed)
                results.append([p, s, Sigma[s],root.compare(decompressed), end-start])
            plt.show()

measure_algorithms()

image = cv2.imread("papaj.png")
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
# plt.imshow(image)
image_arr = np.array(image)
print(image_arr.shape)
# plt.imshow(image)
image_arr = cv2.resize(image_arr, (256, 256), interpolation=cv2.INTER_AREA)
image_arr.shape
plt.imshow(image_arr)
plt.axis('off')

red_channel = image_arr[:, :, 0]
green_channel = image_arr[:, :, 1]
blue_channel = image_arr[:, :, 2]
red_channel = red_channel.astype(np.uint8)
green_channel = green_channel.astype(np.uint8)
blue_channel = blue_channel.astype(np.uint8)
rgb_image = np.stack((red_channel, green_channel, blue_channel), axis=2)

# Display the RGB image
plt.imshow(rgb_image.astype(np.uint8))  # Ensure values are in [0, 255] and of type uint8
plt.axis('off')
plt.title("Reconstructed RGB Image")
plt.show()


plt.figure(figsize=(12, 4))

# Display the Red channel
plt.subplot(1, 3, 1)
plt.imshow(red_channel, cmap='Reds')
plt.title('Red Channel')
plt.axis('off')

# Display the Green channel
plt.subplot(1, 3, 2)
plt.imshow(green_channel, cmap='Greens')
plt.title('Green Channel')
plt.axis('off')

# Display the Blue channel
plt.subplot(1, 3, 3)
plt.imshow(blue_channel, cmap='Blues')
plt.title('Blue Channel')
plt.axis('off')

# Show the plot
plt.tight_layout()
plt.show()

def compress_and_draw_channel(channel, channel_name, r, sigma_idx):
    # Initialize the compression tree
    root = CompressTree(channel, 0, len(channel), 0, len(channel[0]))
    
    # Perform SVD to determine the compression threshold (epsilon)
    U, Sigma, V = svd(channel)

    if sigma_idx == "end":
        sigma_idx = -1
    elif sigma_idx == "half":
        sigma_idx = len(Sigma) // 2 - 1
    epsilon = Sigma[sigma_idx]
    
    # Build the compression tree
    root.create_tree(r, epsilon)
    
    # Prepare a matrix for decompression
    decompressed_channel = np.zeros_like(channel)
    root.decompress(decompressed_channel)
    
    # Display the original channel, decompressed channel, and compressed visualization
    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
    
    # Show the original channel
    ax[0].imshow(channel, cmap=channel_name)
    ax[0].set_title(f'Original {channel_name} Channel')
    ax[0].axis('off')
    
    # Show the decompressed channel
    ax[1].imshow(decompressed_channel, cmap=channel_name)
    ax[1].set_title(f'Decompressed {channel_name} Channel')
    ax[1].axis('off')
    
    # Show the compressed visualization using the draw_tree function
    draw_tree(root, axis=ax[2])
    ax[2].set_title(f'Compressed {channel_name} Visualization')
    ax[2].axis('off')
    plt.show()

    return decompressed_channel

def title_figure(title):
    plt.figure(figsize=(15, 1))
    plt.text(0.5, 0.5, title, fontsize=25, ha='center', va='center')
    plt.axis('off')
    plt.show()
    

def draw_results(r, sigma_idx, title):
    title_figure(title)
    red = compress_and_draw_channel(red_channel, 'Reds', r, sigma_idx)
    green = compress_and_draw_channel(green_channel, 'Greens', r, sigma_idx)
    blue = compress_and_draw_channel(blue_channel, 'Blues', r, sigma_idx)

    after_img = np.concatenate([red[:, :, np.newaxis], green[:, :, np.newaxis], blue[:, :, np.newaxis]], axis=2)
    fig, (before, after) = plt.subplots(1, 2, figsize=(11, 5))
    before.axis('off')
    after.axis('off')
    before.imshow(image)
    before.set_title("Before")
    after.imshow(after_img)
    after.set_title("After")
    plt.show()

RANK = 1
SIGMA_IDX = 1
draw_results(RANK, SIGMA_IDX, F"Compression for max_rank = {RANK}, sigma_idx = {SIGMA_IDX}")

RANK = 1
SIGMA_IDX = "half"
draw_results(RANK, SIGMA_IDX, F"Compression for max_rank = {RANK}, sigma_idx = {SIGMA_IDX}")

RANK = 1
SIGMA_IDX = "end"
draw_results(RANK, SIGMA_IDX, F"Compression for max_rank = {RANK}, sigma_idx = {SIGMA_IDX}")

RANK = 4
SIGMA_IDX = 1
draw_results(RANK, SIGMA_IDX, F"Compression for max_rank = {RANK}, sigma_idx = {SIGMA_IDX}")

RANK = 4
SIGMA_IDX = "half"
draw_results(RANK, SIGMA_IDX, F"Compression for max_rank = {RANK}, sigma_idx = {SIGMA_IDX}")

RANK = 4
SIGMA_IDX = "end"
draw_results(RANK, SIGMA_IDX, F"Compression for max_rank = {RANK}, sigma_idx = {SIGMA_IDX}")